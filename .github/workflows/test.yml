name: Run Tests

on:
  pull_request:
    branches: [ main, master, develop ]
  push:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        python run_tests.py --verbose
        
    - name: Run tests with coverage
      run: |
        python run_tests.py --coverage
        
    - name: Upload coverage reports
      if: matrix.python-version == '3.11'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/
        retention-days: 7
        
    - name: Comment coverage on PR
      if: matrix.python-version == '3.11' && github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Try to read coverage report summary
          try {
            // This is a simple approach - in production you might want to parse actual coverage data
            const message = `üß™ **Test Results**
            
            ‚úÖ All tests passed successfully!
            
            üìä **Coverage Report Generated**
            - Detailed HTML coverage report available in artifacts
            - View the coverage report by downloading the \`coverage-report\` artifact
            
            üîç **Test Summary**
            - Comprehensive unit tests for all Python modules
            - AWS service mocking to avoid real API calls
            - Multiple Python versions tested: 3.8, 3.9, 3.10, 3.11, 3.12
            
            Great job! üéâ`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
          } catch (error) {
            console.log('Could not post coverage comment:', error);
          }
